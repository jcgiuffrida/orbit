import{g as i,H as I,d as v,c as p}from"./main-BSNfDbTQ.js";const u={async fetchConversations(){return(await i.get("/conversations/")).data.results},async fetchConversationsForPerson(e){if(!e)return console.warn("fetchConversationsForPerson called with empty personId"),[];const t=await i.get(`/conversations/?participant=${e}`),a=t.data.results||t.data||[];return console.log(`Fetched ${a.length} conversations for person ${e}`),a},async fetchConversationById(e){return(await i.get(`/conversations/${e}/`)).data},async createConversation(e){return(await i.post("/conversations/",e)).data},async updateConversation(e,t){return(await i.put(`/conversations/${e}/`,t)).data},async deleteConversation(e){await i.delete(`/conversations/${e}/`)}},y=[{label:"In Person",value:"in_person",icon:"people",color:"primary"},{label:"Phone Call",value:"phone",icon:"phone",color:"positive"},{label:"Text Message",value:"text",icon:"sms",color:"info"},{label:"Email",value:"email",icon:"email",color:"secondary"},{label:"Video Call",value:"video",icon:"videocam",color:"accent"},{label:"Other",value:"other",icon:"chat",color:"grey-6"}],O=e=>y.find(a=>a.value===e)?.icon||"chat",A=e=>y.find(a=>a.value===e)?.label||"Other",H=e=>y.find(a=>a.value===e)?.color||"grey-6",V=I("conversations",()=>{const e=v([]),t=v(null),a=v(!1),f=v(!1),C=v(null),d=v(null),w=300*1e3,g=p(()=>d.value?Date.now()-d.value<w:!1),F=p(()=>e.value),m=p(()=>e.value.length),s=n=>{a.value=n,n&&(f.value=!1,C.value=null)},l=n=>{f.value=!0,C.value=n,a.value=!1},c=()=>{f.value=!1,C.value=null};return{conversations:e,selectedConversation:t,isLoading:a,hasError:f,error:C,getConversationsList:F,conversationsCount:m,isCacheValid:g,fetchConversations:async(n=!1)=>{if(!n&&g.value&&e.value.length>0)return e.value;s(!0),c();try{const o=await u.fetchConversations();return e.value=o,d.value=Date.now(),o}catch(o){throw console.error("Failed to fetch conversations:",o),l("Failed to load conversations"),o}finally{s(!1)}},fetchConversationsForPerson:async n=>{s(!0),c();try{return await u.fetchConversationsForPerson(n)}catch(o){throw console.error("Failed to fetch conversations for person:",o),l("Failed to load conversations"),o}finally{s(!1)}},fetchConversationById:async n=>{s(!0),c();try{const o=await u.fetchConversationById(n);t.value=o;const r=e.value.findIndex(h=>h.id===n);return r>=0&&(e.value[r]=o),o}catch(o){throw console.error("Failed to fetch conversation:",o),l("Failed to load conversation details"),o}finally{s(!1)}},createConversation:async n=>{s(!0),c();try{const o=await u.createConversation(n);return e.value.unshift(o),d.value=Date.now(),o}catch(o){throw console.error("Failed to create conversation:",o),l("Failed to create conversation"),o}finally{s(!1)}},updateConversation:async(n,o)=>{s(!0),c();try{const r=await u.updateConversation(n,o),h=e.value.findIndex(b=>b.id===n);return h>=0&&(e.value[h]=r),t.value?.id===n&&(t.value=r),r}catch(r){throw console.error("Failed to update conversation:",r),l("Failed to update conversation"),r}finally{s(!1)}},deleteConversation:async n=>{s(!0),c();try{await u.deleteConversation(n),e.value=e.value.filter(o=>o.id!==n),t.value?.id===n&&(t.value=null)}catch(o){throw console.error("Failed to delete conversation:",o),l("Failed to delete conversation"),o}finally{s(!1)}},clearSelectedConversation:()=>{t.value=null},invalidateCache:()=>{d.value=null}}});export{O as a,A as b,y as c,H as g,V as u};
