import{g as u,H as P,d,c as g}from"./main-BtbfkAaC.js";const c={async fetchConversations(e={}){return(await u.get("/conversations/",{params:e})).data},async fetchConversationsForPerson(e){if(!e)return console.warn("fetchConversationsForPerson called with empty personId"),[];const t=await u.get(`/conversations/?participant=${e}`);return t.data.results||t.data||[]},async fetchConversationById(e){return(await u.get(`/conversations/${e}/`)).data},async createConversation(e){return(await u.post("/conversations/",e)).data},async updateConversation(e,t){return(await u.put(`/conversations/${e}/`,t)).data},async deleteConversation(e){await u.delete(`/conversations/${e}/`)}},w=[{label:"In Person",value:"in_person",icon:"people",color:"primary"},{label:"Phone Call",value:"phone",icon:"phone",color:"positive"},{label:"Text Message",value:"text",icon:"sms",color:"info"},{label:"Email",value:"email",icon:"email",color:"secondary"},{label:"Video Call",value:"video",icon:"videocam",color:"accent"},{label:"Other",value:"other",icon:"chat",color:"grey-6"}],R=e=>w.find(r=>r.value===e)?.icon||"chat",j=e=>w.find(r=>r.value===e)?.label||"Other",k=e=>w.find(r=>r.value===e)?.color||"grey-6",A=P("conversations",()=>{const e=d([]),t=d(null),r=d(!1),C=d(!1),h=d(null),f=d(null),x=300*1e3,F=g(()=>f.value?Date.now()-f.value<x:!1),b=g(()=>e.value),m=g(()=>e.value.length),s=n=>{r.value=n,n&&(C.value=!1,h.value=null)},i=n=>{C.value=!0,h.value=n,r.value=!1},v=()=>{C.value=!1,h.value=null};return{conversations:e,selectedConversation:t,isLoading:r,hasError:C,error:h,getConversationsList:b,conversationsCount:m,isCacheValid:F,fetchConversations:async(n=!1)=>{if(!n&&F.value&&e.value.length>0)return e.value;s(!0),v();try{const o=await c.fetchConversations();if(o.results){let a=[...o.results],l=o.next;for(;l;)try{const I=new URL(l).searchParams.get("page"),y=await c.fetchConversations({page:I});if(y.results)a=[...a,...y.results],l=y.next;else break}catch(p){console.error("Error fetching additional conversation page:",p);break}e.value=a}else e.value=o;return f.value=Date.now(),e.value}catch(o){throw console.error("Failed to fetch conversations:",o),i("Failed to load conversations"),o}finally{s(!1)}},fetchConversationsForPerson:async n=>{s(!0),v();try{return await c.fetchConversationsForPerson(n)}catch(o){throw console.error("Failed to fetch conversations for person:",o),i("Failed to load conversations"),o}finally{s(!1)}},fetchConversationById:async n=>{s(!0),v();try{const o=await c.fetchConversationById(n);t.value=o;const a=e.value.findIndex(l=>l.id===n);return a>=0&&(e.value[a]=o),o}catch(o){throw console.error("Failed to fetch conversation:",o),i("Failed to load conversation details"),o}finally{s(!1)}},createConversation:async n=>{s(!0),v();try{const o=await c.createConversation(n);return e.value.unshift(o),f.value=Date.now(),o}catch(o){throw console.error("Failed to create conversation:",o),i("Failed to create conversation"),o}finally{s(!1)}},updateConversation:async(n,o)=>{s(!0),v();try{const a=await c.updateConversation(n,o),l=e.value.findIndex(p=>p.id===n);return l>=0&&(e.value[l]=a),t.value?.id===n&&(t.value=a),a}catch(a){throw console.error("Failed to update conversation:",a),i("Failed to update conversation"),a}finally{s(!1)}},deleteConversation:async n=>{s(!0),v();try{await c.deleteConversation(n),e.value=e.value.filter(o=>o.id!==n),t.value?.id===n&&(t.value=null)}catch(o){throw console.error("Failed to delete conversation:",o),i("Failed to delete conversation"),o}finally{s(!1)}},clearSelectedConversation:()=>{t.value=null},invalidateCache:()=>{f.value=null}}});export{R as a,j as b,w as c,k as g,A as u};
