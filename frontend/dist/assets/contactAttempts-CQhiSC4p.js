import{g as p,H as I,d as u,c as v}from"./main-BSNfDbTQ.js";const i={async fetchContactAttempts(){return(await p.get("/contact-attempts/")).data.results},async fetchContactAttemptsForPerson(t){return(await p.get(`/contact-attempts/?person=${t}`)).data.results},async fetchContactAttemptById(t){return(await p.get(`/contact-attempts/${t}/`)).data},async createContactAttempt(t){return(await p.post("/contact-attempts/",t)).data},async updateContactAttempt(t,o){return(await p.put(`/contact-attempts/${t}/`,o)).data},async deleteContactAttempt(t){await p.delete(`/contact-attempts/${t}/`)}},h=[{label:"Text Message",value:"text",icon:"sms",color:"info"},{label:"Email",value:"email",icon:"email",color:"secondary"},{label:"Phone Call",value:"call",icon:"phone",color:"positive"},{label:"Social Media",value:"social",icon:"share",color:"accent"},{label:"Other",value:"other",icon:"contact_phone",color:"grey-6"}],$=t=>h.find(n=>n.value===t)?.icon||"contact_phone",O=t=>h.find(n=>n.value===t)?.label||"Other",_=t=>h.find(n=>n.value===t)?.color||"grey-6",H=I("contactAttempts",()=>{const t=u([]),o=u(null),n=u(!1),m=u(!1),f=u(null),d=u(null),A=300*1e3,y=v(()=>d.value?Date.now()-d.value<A:!1),g=v(()=>t.value),w=v(()=>t.value.length),c=a=>{n.value=a,a&&(m.value=!1,f.value=null)},l=a=>{m.value=!0,f.value=a,n.value=!1},r=()=>{m.value=!1,f.value=null};return{contactAttempts:t,selectedContactAttempt:o,isLoading:n,hasError:m,error:f,getContactAttemptsList:g,contactAttemptsCount:w,isCacheValid:y,fetchContactAttempts:async(a=!1)=>{if(!a&&y.value&&t.value.length>0)return t.value;c(!0),r();try{const e=await i.fetchContactAttempts();return t.value=e,d.value=Date.now(),e}catch(e){throw console.error("Failed to fetch contact attempts:",e),l("Failed to load contact attempts"),e}finally{c(!1)}},fetchContactAttemptsForPerson:async a=>{c(!0),r();try{return await i.fetchContactAttemptsForPerson(a)}catch(e){throw console.error("Failed to fetch contact attempts for person:",e),l("Failed to load contact attempts"),e}finally{c(!1)}},fetchContactAttemptById:async a=>{c(!0),r();try{const e=await i.fetchContactAttemptById(a);o.value=e;const s=t.value.findIndex(C=>C.id===a);return s>=0&&(t.value[s]=e),e}catch(e){throw console.error("Failed to fetch contact attempt:",e),l("Failed to load contact attempt details"),e}finally{c(!1)}},createContactAttempt:async a=>{c(!0),r();try{const e=await i.createContactAttempt(a);return t.value.unshift(e),d.value=Date.now(),e}catch(e){throw console.error("Failed to create contact attempt:",e),l("Failed to create contact attempt"),e}finally{c(!1)}},updateContactAttempt:async(a,e)=>{c(!0),r();try{const s=await i.updateContactAttempt(a,e),C=t.value.findIndex(F=>F.id===a);return C>=0&&(t.value[C]=s),o.value?.id===a&&(o.value=s),s}catch(s){throw console.error("Failed to update contact attempt:",s),l("Failed to update contact attempt"),s}finally{c(!1)}},deleteContactAttempt:async a=>{c(!0),r();try{await i.deleteContactAttempt(a),t.value=t.value.filter(e=>e.id!==a),o.value?.id===a&&(o.value=null)}catch(e){throw console.error("Failed to delete contact attempt:",e),l("Failed to delete contact attempt"),e}finally{c(!1)}},clearSelectedContactAttempt:()=>{o.value=null},invalidateCache:()=>{d.value=null}}});export{_ as a,$ as b,h as c,O as g,H as u};
