import{g as i,a6 as m,d as v,c as p}from"./main-lLcixNdV.js";const u={async fetchConversations(){return(await i.get("/conversations/")).data.results},async fetchConversationsForPerson(n){return(await i.get(`/conversations/?participant=${n}`)).data.results},async fetchConversationById(n){return(await i.get(`/conversations/${n}/`)).data},async createConversation(n){return(await i.post("/conversations/",n)).data},async updateConversation(n,a){return(await i.put(`/conversations/${n}/`,a)).data},async deleteConversation(n){await i.delete(`/conversations/${n}/`)}},w=[{label:"In Person",value:"in_person",icon:"people"},{label:"Phone Call",value:"phone",icon:"phone"},{label:"Text Message",value:"text",icon:"sms"},{label:"Email",value:"email",icon:"email"},{label:"Video Call",value:"video",icon:"videocam"},{label:"Other",value:"other",icon:"chat"}],O=n=>w.find(r=>r.value===n)?.icon||"chat",A=n=>w.find(r=>r.value===n)?.label||"Other",V=m("conversations",()=>{const n=v([]),a=v(null),r=v(!1),f=v(!1),C=v(null),d=v(null),g=300*1e3,y=p(()=>d.value?Date.now()-d.value<g:!1),F=p(()=>n.value),I=p(()=>n.value.length),o=t=>{r.value=t,t&&(f.value=!1,C.value=null)},l=t=>{f.value=!0,C.value=t,r.value=!1},c=()=>{f.value=!1,C.value=null};return{conversations:n,selectedConversation:a,isLoading:r,hasError:f,error:C,getConversationsList:F,conversationsCount:I,isCacheValid:y,fetchConversations:async(t=!1)=>{if(!t&&y.value&&n.value.length>0)return n.value;o(!0),c();try{const e=await u.fetchConversations();return n.value=e,d.value=Date.now(),e}catch(e){throw console.error("Failed to fetch conversations:",e),l("Failed to load conversations"),e}finally{o(!1)}},fetchConversationsForPerson:async t=>{o(!0),c();try{return await u.fetchConversationsForPerson(t)}catch(e){throw console.error("Failed to fetch conversations for person:",e),l("Failed to load conversations"),e}finally{o(!1)}},fetchConversationById:async t=>{o(!0),c();try{const e=await u.fetchConversationById(t);a.value=e;const s=n.value.findIndex(h=>h.id===t);return s>=0&&(n.value[s]=e),e}catch(e){throw console.error("Failed to fetch conversation:",e),l("Failed to load conversation details"),e}finally{o(!1)}},createConversation:async t=>{o(!0),c();try{const e=await u.createConversation(t);return n.value.unshift(e),d.value=Date.now(),e}catch(e){throw console.error("Failed to create conversation:",e),l("Failed to create conversation"),e}finally{o(!1)}},updateConversation:async(t,e)=>{o(!0),c();try{const s=await u.updateConversation(t,e),h=n.value.findIndex(b=>b.id===t);return h>=0&&(n.value[h]=s),a.value?.id===t&&(a.value=s),s}catch(s){throw console.error("Failed to update conversation:",s),l("Failed to update conversation"),s}finally{o(!1)}},deleteConversation:async t=>{o(!0),c();try{await u.deleteConversation(t),n.value=n.value.filter(e=>e.id!==t),a.value?.id===t&&(a.value=null)}catch(e){throw console.error("Failed to delete conversation:",e),l("Failed to delete conversation"),e}finally{o(!1)}},clearSelectedConversation:()=>{a.value=null},invalidateCache:()=>{d.value=null}}});export{A as a,w as c,O as g,V as u};
